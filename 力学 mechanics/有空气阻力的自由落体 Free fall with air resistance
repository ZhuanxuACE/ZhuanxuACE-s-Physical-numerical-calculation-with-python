import numpy as np
from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation
'''
计算微分方程组：
v' = 10 - v^2
x' = v

f: y(x[n+1]) =y(x[n]) + h*f{x[n],y(x[n])}
    or dy/dx = f(x,y)
x: x[n]
y: y(x[n])
h: step is h = x[n+1]-x[n]

k1 = h*f(x,y)
k2 = h*f(x+0.5*h,y+0.5*h*k1)
k3 = h*f(x+0.5*h,y+0.5*h*k2)
k4 = h*f(x+h, y+h*k3)
y_n = (1/6.0)*(k1 + 2*k2 + 2*k3 + k4)*h + y
'''

#定义dx/dt = v
def x_func(t,x,v):
    return v

#定义dv/dt = mg - F
def v_func(t,x,v):
    if v<0:
        f_atmosphere = 0.002*v**2
    else:
        f_atmosphere = -0.002*v**2
    return -10 + f_atmosphere

t_min = 0
t_max = 1.6
h = 0.01
n = int((t_max-t_min)/h)
t = np.linspace(t_min, t_max, n)

x = np.zeros(n)
v = np.zeros(n)

x[0] = 0
v[0] = 9

#4阶龙格库塔法计算二阶微分方程
#Computing second order ODE using 4RK
for i in range(n-1):
    kx1 = x_func(t[i],x[i],v[i])
    kv1 = v_func(t[i],x[i],v[i])

    kx2 = x_func(t[i]+0.5*h,x[i]+0.5*h*kx1,v[i]+0.5*h*kv1)
    kv2 = v_func(t[i]+0.5*h,x[i]+0.5*h*kx1,v[i]+0.5*h*kv1)
    
    kx3 = x_func(t[i]+0.5*h,x[i]+0.5*h*kx2,v[i]+0.5*h*kv2)
    kv3 = v_func(t[i]+0.5*h,x[i]+0.5*h*kx2,v[i]+0.5*h*kv2)
    
    kx4 = x_func(t[i]+h,x[i]+h*kx3,v[i]+h*kv3)
    kv4 = v_func(t[i]+h,x[i]+h*kx3,v[i]+h*kv3)
    
    x[i+1] = x[i] + h*(kx1 + 2*kx2 + 2*kx3 + kx4)/6
    v[i+1] = v[i] + h*(kv1 + 2*kv2 + 2*kv3 + kv4)/6

print(x)
print(v)

#位置与时间曲线
#Position-time curve
fig = plt.figure(dpi = 120,figsize=(10,4))
ax1 = fig.add_subplot(131)
ax1.plot(t,x)
point_ax1 = ax1.scatter(1,1)
ax1.set_ylim([0,5])
ax1.set_title("h-t curve")
ax1.set_xlabel("t")
ax1.set_ylabel("h")

#动画演示
#animated demo
ax2 = fig.add_subplot(132)
point_ax2 = ax2.scatter(x[0],0)
ax2.set_title("animated demo")
ax2.set_xlim([-1,1])
ax2.set_ylim([0,5])

#速度-时间曲线
#Velocity-time curve
ax3 = fig.add_subplot(133)
ax3.plot(t,v)
point_ax3 = ax3.scatter(1,1)
ax3.set_title("v-t curve")
ax3.set_xlabel("t")
ax3.set_ylabel("v")

def updata(updata):
    point_ax1.set_offsets([t[updata],x[updata]])
    point_ax2.set_offsets([0,x[updata]])
    point_ax3.set_offsets([t[updata],v[updata]])

ani = FuncAnimation(fig,updata,frames = n,interval = 33)
#打开下面代码保存gif图 Open the following code to save the gif
#ani.save("Free_fall_with_air_resistance.gif",writer = 'pillow')

plt.show()
